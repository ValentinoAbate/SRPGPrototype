General Ideas:
- Make the basic attack transient - (not really working, find some other downside)
- Basic move along path is additive with adjacents.
- Negative space - scales / shapes with biggest adjacent empty space or number of empty spaces
- Heal to full when installed - cannot be uninstalled
- Cannot switch shells while uninstalled
- Moves should cost low AP compared to standard actions? (maybe move base 1, standard base 2)?
- program fusion
- AP goes up after each usage instead of uses per turn - (implemented, seems better)
- Is most of the strategy based not on combining abilities, but situational usefulness? Maybe give the player previews of next encounters like bad north
- Matryoshka enemies that unpack when killed (for area chains)
- Turrets should be neutral (encounter can end without defeating them, can attack both teams)
- Allow certain multi-actions to be cancellable (multiple part target selection, etc)
- Add enemy-only programs as a specific rarity?
- Have a program that evolves if you finish an encounter in one turn
- Allow the player to run, but only if there are other encounters they could go to, and add penalties. They can't return to the same encounter.
- Add uninstall all option
- Use free move action as a stat like speed?

Color Mapping (action type to color not really working right now, may work with hybrid actions):
- Blue (circle): Move actions
- Red (triangle): Attack actions
- Green (square): Support actions
- Yellow (star): Hybrid actions
- White (hexagon): Programs whose colors are set by special means
- Non-action programs may be any color
- Shapes added for addional mapping and colorblind accesibility

Shell Capacity:
- Each shell has 3 capacity levels. 
	- When the sum total of the "capacity" values of installed programs reaches reaches certain thresholds, the shell levels up and increases in size by 1 number.
	- There are several different progression paths:
	- Standard: start at size 1. Level 2: 2, Level 3: 5
	- Small: start at size 0. Level 2: 1, Level 3: 4
	- Large: start at size 2. Level 2: 3, Level 3: 6
	- Full: start at size 0. Level 2: 2, Level 3: 4, Level 4: 6, Level 5: 8 
	- Programs that give capacity cannot be uninstalled while uninstalling them would be any currently installed programs illegal
	- Shells expand into the bottom right corner, and then the top left, every other level
- Size 0 shells are 4 x 4, with an average of 08-12 squares open
- Size 1 Shells are 5 x 5, with an average of 14-18 squares open
- Size 2 Shells are 6 x 6, with an average of 24-28 sqaures open
- Size 3 Shells are 7 x 7, with an average of 34-38 squares open
- Size 4 Shells are 8 x 8, with an average of 44-48 squares open

Themes: Themes for a player to build a deck around
- DOT
- Stat gain / spending
- Evolving
- Destroying
- Fixed Programs
- Colors
- Hitting Multiple targets - This one is good
- Moving a lot - This one is good
- Get free move action - This one is good
- Moving enemy unit - this one is good
- Scouting - this one is good

Special Effects:
- Pattern is adjacent area / negative space

Numbers: written, as [x], [y], or etc. Can be any numeric quantity. may always have a min/max
-> Basic numbers
+ Constant
-> Program / Shell numbers
+ Number of [attribute] programs installed (- action type)
- Number of [attribute] squares installed
- Highest/lowest adjacent programs/square of [attribute]
- Number of empty spaces left
- Highest/lowest adjacent empty spaces
- Target/user value of [stat]
+ Dimensions of the shell
+ Coordinate of install position
-> Action numbers
+ Ap cost
+ Number of targets hit
+ Number of Uses this turn
+ Number of Uses this battle
+ Number of Uses
- Slowdown
- Slowdown rate

Stats: quantities availible to the player. 
+ MaxAP (min: 0, max: none)
+ AP (min: 0, max: MaxAP) - Recharges to MaxAP at end of turn and end of battle
+ MaxHP (min: 0, max: none) - Recharges to shell level at end of encounter. 0 means you die.
+ HP (min: 0, max: MaxHP)
+ Repair (min: 0, max: none) - Added to your hp and then resets to shell level after repairing
+ Power (min: none, max: none) - Added to the damage of any effect. gets one closer to zero after being used. resets to shell level after an encounter
+ Speed (min: none, max: none) - Subtracted from the AP cost of any action. Get one closer to zero after being applied. resets to shell level after an encounter
- Defense (min: none, max: none) - Subtracted from any damage taken. Get closer to zero after being applied. resets to shell level after an encounter.


Effects: Apply to a pattern
+ Deal [x] damage
- Steal [x] hp
- Steal [x] hp as [stat]
- Steal [stat] as [stat]
+ Deal [x] [stat] damage
	- Deal AP damage equal to enemy speed
+ Reduce [x] AP
- Move to end of [path]
+ Jump / Teleport target
+ Push target
+ Pull Target
- Swap with target
- Reposition / throw target (requires two-part cancellable actions)
+ Move target towards position (for charge, etc)
- Add [x] [stat]
- Give free move action - good

Patterns:
- Path [x] tiles (usually move, but could be effect)
- Circle [x] radius
- Square [x] sidelength

Costs: This effect must first be applied to the user to use this action (fails if effect impossible)
- pay [x] [stat]

Attributes: Attributes of a program, common attributes are the program colors
+ Colors
+ Rarities
+ Fixed
+ Action Type (Standard / Move / Hybrid)
+ Transient ([x]) - Destroy after [x] uses or activations
- Corrupted ([time]) - Destroy after time
- Unstable ([trigger]) - Destroy when triggered
- Transforms ([trigger]) - Permanently Change to Unknown program when triggered
- Promotes ([trigger], [time]) - Changes to promoted program effects when triggered (until time has passed)
- Quickdraw - Can only use a the beginning of the turn
- Ambush - Can only be used at the beginning of the battle
- Shatter - destroy after hit for [x] or more damage (pair with defense)

Time: An amount of time
- [x] encounters
- [x] turns

Scopes: a group of programs to which something is applied
- All programs
- All programs of [attribute]
- Adjacent programs
- Non-adjacent programs
- Modified programs

Modifiers: These effects modify other programs in a certain scope (see scope)
- [scope] programs have [x] less/more uses per turn/battle (min/max [y])
- [scope] programs do [x] more/less damage
- [scope] transient programs have [x] more uses. (pair with fixed, unstable - any/all modified programs are destroyed)
- Add [attribute] to [scope] (Fixed, transient, color, etc. pair with fixed)
- Apply cost to [scope] programs
- [scope] blocked cust squares become open. Gains Fixed when a program is installed in any opened slot that isn't also opened from another source
	- [scope] = adjacent

Abilities: These effects give the player special passive abilities
- AP carries over to next turn (pair with -AP gain)
- AP doesn't recharge at the end of the turn (pair with + MaxAP)
- HP fully recharges at the end of the battle (Pair with -MaxHP or maybe half max hp)
	- Your base repair is always equal to your max hp (more interesting)
- Any AP left at the end of the turn is dealt as damage (Pair with positive effect)
- You can go into [x] repair debt (damages you at repair)
- You can go into [x] AP dept (damages you when AP rechanges, maybe subtracts from your next turn)
	- Pair with actions / abilities that get worse with positive AP
- Using the same action more than once in a turn [scales] it
- MaxHP + [x], Unstable HP <= [y]
- When [trigger] gain [ability]/[stat] for [time]
	- When a program is destroyed, gain "All attacks do +1 damage" for 1 encounter
	- Using a hybrid action gives you +1 speed. You cannot install non-hybrid actions
- Any transient action that hits more than [x] targets doesn't use a degrade
	- [x] is 2
	- Add Transient 3 + number of fixed transient programs installed
- Apply [effect] when any target is moved
	- Apply def - 1 on any target that is moved

Trigger: Trigger an effect on this condition
- When any/all [scope] programs transform / promote / destroy
- After [x] uses
- When stat is less/greater/equal to [x]
- After an [attribute] program is used
- When an enemy unit is destroyed
- When a unit is destroyed by friendly fire

Action conditions:
- Can only use if moved more/less than [x] tiles
- Can only use if used more/less that [x] different actions this turn
- Can't use any other action this turn

Cust resrictions:
+/- Can't/must put same colors next to each other (Only can't rn)
- Can't have a program that is adjacent to two or more programs of different colors
- Can't/must use [color] color
- Can't use more/less than [x] colors
- Can't use more/less than [x] programs
- Can't use more/less than [x] of [type] of program

Recurring enemies that build shells and have the same macro mechanics as you do:
- Maybe simulate them playing the game, or use other players' data?
- Based on "Rivals" from pokemon
- Procedurally generate / select their goals, and have them be helpful or antagonistic depending on if what the player is doing helps or hinders those goals

Passive:

- Promotion mechanics (Shogi? Look into mini-shogi), maybe macro level upgrades with specific conditions? Maybe micro mid-encounter.
- Maybe look into battleship?
- Maybe have inventory be a limited grid

Encounter Design:
- Grid gets bigger after every boss -> 6 x 6 -> 7 x 7 -> 8 x 8 (maybe 5 -> 6 -> 7 to match shells?)
- Base off of Dnd CR?
- Each unit has a CR rating, and assemble an ecnounter based off a CR budget
- Possibly give units a "Theme" tag too (heavy, ranged, diagonal, AOE, etc)?
- Choose next unit based on current board (with previous units factored in)
- Certain units could want to be in an encounter with certain other units or not want to be
- Limit unit list by area?
- Inputs to generation alg:
	- Grid dimensions?
	- Unit list?
	- Optional: Number of units?
	- Optional: "Theme" heur
	- Optional: partially-constructed encounter to add to (like a seed encounter)
- Make high HP enemies change as turns pass (get stronger / charge up abilities and actions)
Environment Designs:
- Nest: HP: 3, AP:1, Move: None, Attack: Damage self (1)
	- When destroyed, spawns 1 / 2 Swarm (spawn logic tbd)
- Nest+: HP: 3, AP:1, Move: None, Attack: Damage self (1)
	- When destroyed, spawns 2 / 3 Swarm+ (spawn logic tbd)
- Nest Nest:
	- When destroyed, spawn other nests
Enemy Designs:
+ Soldier: HP: 4, AP: 2, Move: Basic, Attack: Basic
+ Seeker: HP: 5, AP: 3, Move: Basic (Fast), Attack: Basic
+ Swarm: HP: 2, AP: 1, Move: Basic, Attack: Basic, Cost (1 / 0.5)
	- Potentially give more AP but do less damage?
- Swarm+: HP: 2, AP: 2, Move: Basic, Attack: Basic
- Nest Queen / The Hive (Boss)
- Nestmaker: HP: 8, AP 2, Move Basic, Action: Make nest
	- Makes nests in empty tiles
- NestHatcher: 
	- Goes around hatching nests
- Switch: HP: 5, AP:2, Attack: Basic
	- Has Move: Diagonal 1 tile (1 AP, 1/1 slowdown?) if in diagonal mode
	- Has Move: Basic if in horizontal mode
	- Switches modes at the end of the phase. Chooses a random mode at spawn
- Switch+: HP: 6/7, AP:2, Attack: Basic
	- Has Move: Diagonal any number of tile (1 AP, 1/1 slowdown?) if in diagonal mode
	- Has Move: Horizontal any number of tile (1 AP, 1/1 slowdown?) if in horizontal mode
	- Switches modes at the end of the phase. Chooses a random mode at spawn
- Toggle: HP: 6, AP:2, Attack: Basic
	- Has Move: Diagonal 1 tile (1 AP, 1/1 slowdown?) if in diagonal mode
	- Has Move: Basic if in horizontal mode
	- Switches modes when damaged. Chooses a random mode at spawn
- Toggle+: HP: 8, AP:2, Attack: Basic
	- Has Move: Diagonal 1 tile (1 AP, 1/1 slowdown?) if in diagonal mode
	- Has Move: Basic if in horizontal mode
	- Switches modes when damaged. Chooses a random mode at spawn
- Walking Nest: HP: 3, AP:2, Move: Basic, Attack: Basic
	- When destroyed, spawns 1 / 2 Swarm (spawn logic tbd)
- Walking Nest+: HP: 5, AP:2, Move: Basic, Attack: Basic
	- When destroyed, spawns 2 / 3 Swarm (spawn logic tbd)

- Bomb Nest:
	- When destroyed, spawn bombs
- Bomb: HP: 3, AP 2, Move: Basic (maybe slow), Attack: Explosion 1
	- Explosion 1 (1AP): Hit every adjacent (Horizontal) (to target) square for 4 damage. Destroy target. Targets self
	- Trigger: Destroyed (except by self) use Explosion 1. Anything that is destroyed by this effect is considered to be destroyed by the unit that destroyed this one
- Bomb+: HP: 5, AP 2, Move: Basic (maybe slow), Attack: Explosion 1
	- Explosion 2 (1AP): Hit every adjacent (Horizontal + Diag) (to target) square for 5 damage. Destroy target. Targets self
	- Trigger: Destroyed (except by self) use Explosion 2. Anything that is destroyed by this effect is considered to be destroyed by the unit that destroyed this one
Map Design:
- All events are on a combat grid (even if they do not contain enemies) - most will
	- Think FE rekka no ken
- Loot is visible as battle mystery data (think mmbn6)
	- Mystery data should have two kinds of info: Rarity (frame) and color (type of loot)
	- Like just support / buffs, actions, abilities, or generic
- Special Events (merchant, etc) are NPCs or locations in the map
- Branching map, or maybe just choose next from three (possibly with the ability to scout forward)
- 4 levels of info - unknown, hint, field view, field view with details
- Have some be ambushes where extra reinforcements spawn or another NPC shows up, etc
- Some squares might be corrupted and unviewable 

Player characters:
- Break (tyring to end the cycle)
	- Can end the run / cycle at multple points during the run, at which point they go to their true path
- Continue (trying to protect the cycle)
	- Can continue to a next playthrough after beating a run

NPCS:
- Make all NPCs have an Other half / missing piece?
- Your other half (break if playing as continue or continue if playing as break)
- Merchant
- Repairperson / Fixer
- Really want a gambler (could be a sub-trait)
- Hunter (Treasure Hunter? Bounty Hunter? Maybe different between runs)
- Defender / Keeper (maybe opposite of Hunter)